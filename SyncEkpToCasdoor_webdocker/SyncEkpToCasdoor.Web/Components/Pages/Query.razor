@page "/query"
@using SyncEkpToCasdoor.Web.Services
@using SyncEkpToCasdoor.Web.Components.Pages
@inject ISyncService SyncService
@rendermode InteractiveServer

<h3>数据查询</h3>

<h1>🔍 数据查询</h1>

<div class="row mt-4">
    <!-- 用户查询 -->
    <div class="col-md-6">
        <div class="card">
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0">👤 用户查询</h5>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <label class="form-label">查询方式</label>
                    <select class="form-select" @bind="userQueryMode">
                        <option value="single">单个查询</option>
                        <option value="batch">批量查询</option>
                        <option value="list">列表查询</option>
                    </select>
                </div>
                
                @if (userQueryMode == "single")
                {
                    <div class="input-group mb-3">
                        <input type="text" class="form-control" placeholder="输入用户名或姓名" @bind="singleUserQuery">
                        <button class="btn btn-primary" @onclick="SearchSingleUser">
                            🔍 查询
                        </button>
                    </div>
                }
                else if (userQueryMode == "batch")
                {
                    <div class="mb-3">
                        <label class="form-label">批量查询（每行一个用户名）</label>
                        <textarea class="form-control" rows="5" @bind="batchUserQuery" 
                                  placeholder="user1&#10;user2&#10;user3"></textarea>
                    </div>
                    <button class="btn btn-primary w-100" @onclick="SearchBatchUsers" disabled="@isQueryingUsers">
                        @if (isQueryingUsers)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        🔍 批量查询
                    </button>
                }
                else if (userQueryMode == "list")
                {
                    <div class="mb-3">
                        <label class="form-label">查询条件</label>
                        <div class="row">
                            <div class="col-6">
                                <input type="text" class="form-control mb-2" placeholder="公司名称" @bind="userCompanyFilter">
                            </div>
                            <div class="col-6">
                                <input type="text" class="form-control mb-2" placeholder="部门名称" @bind="userDeptFilter">
                            </div>
                        </div>
                        <input type="number" class="form-control mb-2" placeholder="最多返回条数（默认100）" @bind="userListLimit" min="1" max="1000">
                    </div>
                    <button class="btn btn-primary w-100" @onclick="SearchUserList" disabled="@isQueryingUsers">
                        @if (isQueryingUsers)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        🔍 查询列表
                    </button>
                }
                
                @if (searchedUsers.Any())
                {
                    <hr />
                    <div style="max-height: 500px; overflow-y: auto;">
                        <h6>查询结果 (@searchedUsers.Count 个用户)</h6>
                        @foreach (var user in searchedUsers)
                        {
                            <div class="card mb-2">
                                <div class="card-body p-3">
                                    <div class="row">
                                        <div class="col-6">
                                            <small class="text-muted">用户名:</small><br />
                                            <strong>@user.Username</strong>
                                        </div>
                                        <div class="col-6">
                                            <small class="text-muted">显示名:</small><br />
                                            <strong>@user.DisplayName</strong>
                                        </div>
                                    </div>
                                    <div class="row mt-2">
                                        <div class="col-6">
                                            <small class="text-muted">公司:</small><br />
                                            @user.CompanyName
                                        </div>
                                        <div class="col-6">
                                            <small class="text-muted">部门:</small><br />
                                            @user.Affiliation
                                        </div>
                                    </div>
                                    @if (!string.IsNullOrEmpty(user.Owner))
                                    {
                                        <div class="mt-2">
                                            <small class="text-muted">组织:</small>
                                            <span class="badge bg-secondary">@user.Owner</span>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                    
                    <button class="btn btn-sm btn-outline-secondary mt-2" @onclick="ExportUsers">
                        📥 导出为CSV
                    </button>
                }
                else if (userQueryPerformed)
                {
                    <div class="alert alert-warning mt-3">
                        未找到匹配的用户
                    </div>
                }
            </div>
        </div>
    </div>
    
    <!-- 组织查询 -->
    <div class="col-md-6">
        <div class="card">
            <div class="card-header bg-success text-white">
                <h5 class="mb-0">🏢 组织查询</h5>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <label class="form-label">查询方式</label>
                    <select class="form-select" @bind="orgQueryMode">
                        <option value="tree">完整树形结构</option>
                        <option value="search">搜索组织</option>
                        <option value="path">路径查询</option>
                    </select>
                </div>
                
                @if (orgQueryMode == "search")
                {
                    <div class="input-group mb-3">
                        <input type="text" class="form-control" placeholder="输入组织名称关键字" @bind="orgSearchKeyword">
                        <button class="btn btn-success" @onclick="SearchOrganizations">
                            🔍 搜索
                        </button>
                    </div>
                }
                else if (orgQueryMode == "path")
                {
                    <div class="input-group mb-3">
                        <input type="text" class="form-control" placeholder="输入组织ID" @bind="orgPathId">
                        <button class="btn btn-success" @onclick="GetOrganizationPath">
                            🔍 查询路径
                        </button>
                    </div>
                }
                else
                {
                    <button class="btn btn-success w-100 mb-3" @onclick="LoadOrganizationTree" disabled="@isLoadingOrgs">
                        @if (isLoadingOrgs)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        🌳 加载组织树
                    </button>
                }
                
                @if (organizationTree.Any())
                {
                    <hr />
                    <div style="max-height: 600px; overflow-y: auto;">
                        <h6>组织结构 (@TotalOrgCount 个组织)</h6>
                        @foreach (var org in organizationTree)
                        {
                            <OrgTreeNode Organization="@org" Level="0" />
                        }
                    </div>
                    
                    <div class="mt-3">
                        <button class="btn btn-sm btn-outline-secondary me-2" @onclick="ExpandAllOrgs">
                            ➕ 全部展开
                        </button>
                        <button class="btn btn-sm btn-outline-secondary me-2" @onclick="CollapseAllOrgs">
                            ➖ 全部收起
                        </button>
                        <button class="btn btn-sm btn-outline-primary" @onclick="ExportOrganizations">
                            📥 导出结构
                        </button>
                    </div>
                }
                else if (orgQueryPerformed)
                {
                    <div class="alert alert-warning">
                        未找到组织数据
                    </div>
                }
                
                @if (currentOrgPath.Any())
                {
                    <hr />
                    <h6>组织路径</h6>
                    <nav aria-label="breadcrumb">
                        <ol class="breadcrumb">
                            @foreach (var (org, index) in currentOrgPath.Select((o, i) => (o, i)))
                            {
                                <li class="breadcrumb-item @(index == currentOrgPath.Count - 1 ? "active" : "")">
                                    @org.Name
                                    @if (org.UserCount > 0)
                                    {
                                        <span class="badge bg-primary ms-1">@(org.UserCount)人</span>
                                    }
                                </li>
                            }
                        </ol>
                    </nav>
                }
            </div>
        </div>
    </div>
</div>

@if (!string.IsNullOrEmpty(exportMessage))
{
    <div class="row mt-4">
        <div class="col-12">
            <div class="alert alert-success alert-dismissible fade show">
                @exportMessage
                <button type="button" class="btn-close" @onclick="() => exportMessage = string.Empty"></button>
            </div>
        </div>
    </div>
}

@code {
    // 用户查询
    private string userQueryMode = "single";
    private string singleUserQuery = "";
    private string batchUserQuery = "";
    private string userCompanyFilter = "";
    private string userDeptFilter = "";
    private int userListLimit = 100;
    private List<UserInfo> searchedUsers = new();
    private bool isQueryingUsers = false;
    private bool userQueryPerformed = false;
    
    // 组织查询
    private string orgQueryMode = "tree";
    private string orgSearchKeyword = "";
    private string orgPathId = "";
    private List<OrgTreeNode.OrganizationNode> organizationTree = new();
    private List<OrgTreeNode.OrganizationNode> currentOrgPath = new();
    private bool isLoadingOrgs = false;
    private bool orgQueryPerformed = false;
    
    private string exportMessage = "";
    
    private int TotalOrgCount => CountOrgs(organizationTree);
    
    private int CountOrgs(List<OrgTreeNode.OrganizationNode> nodes)
    {
        int count = nodes.Count;
        foreach (var node in nodes)
        {
            count += CountOrgs(node.Children);
        }
        return count;
    }
    
    // 用户查询方法
    private async Task SearchSingleUser()
    {
        userQueryPerformed = true;
        searchedUsers.Clear();
        
        var user = await SyncService.PeekUserAsync(singleUserQuery);
        if (user != null)
        {
            searchedUsers.Add(user);
        }
        
        StateHasChanged();
    }
    
    private async Task SearchBatchUsers()
    {
        userQueryPerformed = true;
        isQueryingUsers = true;
        searchedUsers.Clear();
        
        try
        {
            var usernames = batchUserQuery.Split('\n', StringSplitOptions.RemoveEmptyEntries)
                                          .Select(u => u.Trim())
                                          .Where(u => !string.IsNullOrEmpty(u))
                                          .ToList();
            
            foreach (var username in usernames)
            {
                var user = await SyncService.PeekUserAsync(username);
                if (user != null)
                {
                    searchedUsers.Add(user);
                }
            }
        }
        finally
        {
            isQueryingUsers = false;
            StateHasChanged();
        }
    }
    
    private async Task SearchUserList()
    {
        userQueryPerformed = true;
        isQueryingUsers = true;
        searchedUsers.Clear();
        
        try
        {
            // TODO: 实现列表查询API
            await Task.Delay(500); // 模拟查询
            
            // 示例数据
            searchedUsers = new List<UserInfo>
            {
                new UserInfo
                {
                    Username = "zhangsan",
                    DisplayName = "张三",
                    CompanyName = "福州城市建设投资集团",
                    Affiliation = "技术部",
                    Owner = "fzswjtOrganization"
                }
            };
        }
        finally
        {
            isQueryingUsers = false;
            StateHasChanged();
        }
    }
    
    private async Task ExportUsers()
    {
        // TODO: 实现导出功能
        await Task.Delay(200);
        exportMessage = $"✓ 已导出 {searchedUsers.Count} 个用户到: exports/users_{DateTime.Now:yyyyMMdd_HHmmss}.csv";
        StateHasChanged();
    }
    
    // 组织查询方法
    private async Task LoadOrganizationTree()
    {
        orgQueryPerformed = true;
        isLoadingOrgs = true;
        organizationTree.Clear();
        
        try
        {
            // TODO: 从服务获取组织树
            await Task.Delay(1000);
            
            // 示例数据 - 构建树形结构
            organizationTree = new List<OrgTreeNode.OrganizationNode>
            {
                new OrgTreeNode.OrganizationNode
                {
                    Id = "1",
                    Name = "福州城市建设投资集团",
                    ParentId = null,
                    UserCount = 50,
                    IsExpanded = true,
                    Children = new List<OrgTreeNode.OrganizationNode>
                    {
                        new OrgTreeNode.OrganizationNode
                        {
                            Id = "1-1",
                            Name = "总经办",
                            ParentId = "1",
                            UserCount = 10,
                            Children = new List<OrgTreeNode.OrganizationNode>()
                        },
                        new OrgTreeNode.OrganizationNode
                        {
                            Id = "1-2",
                            Name = "技术部",
                            ParentId = "1",
                            UserCount = 25,
                            Children = new List<OrgTreeNode.OrganizationNode>
                            {
                                new OrgTreeNode.OrganizationNode
                                {
                                    Id = "1-2-1",
                                    Name = "开发组",
                                    ParentId = "1-2",
                                    UserCount = 15,
                                    Children = new List<OrgTreeNode.OrganizationNode>()
                                },
                                new OrgTreeNode.OrganizationNode
                                {
                                    Id = "1-2-2",
                                    Name = "测试组",
                                    ParentId = "1-2",
                                    UserCount = 10,
                                    Children = new List<OrgTreeNode.OrganizationNode>()
                                }
                            }
                        },
                        new OrgTreeNode.OrganizationNode
                        {
                            Id = "1-3",
                            Name = "财务部",
                            ParentId = "1",
                            UserCount = 15,
                            Children = new List<OrgTreeNode.OrganizationNode>()
                        }
                    }
                }
            };
        }
        finally
        {
            isLoadingOrgs = false;
            StateHasChanged();
        }
    }
    
    private async Task SearchOrganizations()
    {
        orgQueryPerformed = true;
        // TODO: 实现组织搜索
        await LoadOrganizationTree();
        
        // 过滤结果
        if (!string.IsNullOrEmpty(orgSearchKeyword))
        {
            FilterOrganizations(organizationTree, orgSearchKeyword);
        }
    }
    
    private bool FilterOrganizations(List<OrgTreeNode.OrganizationNode> nodes, string keyword)
    {
        bool hasMatch = false;
        foreach (var node in nodes.ToList())
        {
            bool childMatch = FilterOrganizations(node.Children, keyword);
            bool selfMatch = node.Name.Contains(keyword, StringComparison.OrdinalIgnoreCase);
            
            if (!selfMatch && !childMatch)
            {
                nodes.Remove(node);
            }
            else
            {
                hasMatch = true;
                node.IsExpanded = true;
            }
        }
        return hasMatch;
    }
    
    private async Task GetOrganizationPath()
    {
        currentOrgPath.Clear();
        
        // TODO: 从服务获取组织路径
        await Task.Delay(200);
        
        // 示例路径
        currentOrgPath = new List<OrgTreeNode.OrganizationNode>
        {
            new OrgTreeNode.OrganizationNode { Id = "1", Name = "福州城市建设投资集团", UserCount = 50 },
            new OrgTreeNode.OrganizationNode { Id = "1-2", Name = "技术部", UserCount = 25 },
            new OrgTreeNode.OrganizationNode { Id = "1-2-1", Name = "开发组", UserCount = 15 }
        };
        
        StateHasChanged();
    }
    
    private void ExpandAllOrgs()
    {
        SetExpanded(organizationTree, true);
        StateHasChanged();
    }
    
    private void CollapseAllOrgs()
    {
        SetExpanded(organizationTree, false);
        StateHasChanged();
    }
    
    private void SetExpanded(List<OrgTreeNode.OrganizationNode> nodes, bool expanded)
    {
        foreach (var node in nodes)
        {
            node.IsExpanded = expanded;
            SetExpanded(node.Children, expanded);
        }
    }
    
    private async Task ExportOrganizations()
    {
        var filePath = await SyncService.ExportOrganizationHierarchyAsync();
        exportMessage = $"✓ 组织结构已导出到: {filePath}";
        StateHasChanged();
    }
}
